%% MATLAB Job Scheduler Output Retrieval Script File
% AUTHORS: M Harvey (michael.harvey@students.wits.ac.za)
% REVISED BY: D Platt (donovan.platt@students.wits.ac.za
% DATE: 12-Sep-2016 13:49:00
% VERSION: mjs_client_submit_script_v001ba
%
% # PROBLEM SPECIFICATION: This script is to be run in the client MATLAB
% session on the remote client computer (i.e. on one of the computers in
% the AMF lab or on the remote client machine "amfentry.ms.wits.ac.za"
% which is accessed via Windows Remote Desktop). This script is used to
% retrieve the output of a single job from the AMF cluster. The script
% requires as input the MAT-file with the MJS job ID, generated by the job
% submission script (mjs_client_submit_script_v001ba). To be specific, this
% script should be kept in the same directory as the script (batch code)
% submitted to the MJS as well as the submission script. When this script
% is run two dialogue boxes will open. The first will ask the user to find
% the appropriate MAT-file containing the relevant job ID, which should be
% in the same directory as this script. The second will ask the user to
% save a MAT-file of the job's outputs. Once the job ID is loaded, the
% script checks with the MJS to see if the job has finished running. If it
% has not finished, the user is requested to try again later. If the
% job has finished running this script will automatically fetch the output
% of the job and a dialogue box will open up asking the user to save a MAT-
% file of the job's output. This dialogue box cannot be cancelled and
% forces the user to save the fetched output. This is because the job will
% be deleted from the MJS when running this script. It is extremely
% important to be aware that the job's output is literally whatever is left
% in the workspace of the job after it has run and hence, when developing
% the script the user should consciously choose what variables are left in
% the workspace after the script has run as these are the only ones that
% will be returned. It should be stressed that only the relevant outputs
% should be left in the workspace so as to prevent unnecessary usage of
% disk space on the MJS's remote job data storage location as well as for
% quicker transfers of only non-redundant outputs. Further, if the
% workspace of the job exceeds 2GB this script returns an error and the job
% will not be deleted from the MJS. This is a problem that we have not
% officially sorted out yet.
%
% # DATA SPECIFICATION: This script requires an input. Specifically, the
% output MAT-file of the script used to submit the job to the MJS (i.e. the
% output of mjs_client_submit_script_v001ba) is required as input as it
% contains the job ID of the particular job the user wishes to retrieve the
% output of. The input is specifically the MAT-file containing the job name
% (MYJOBNAME) and the MJS job ID (MYJOBID). When the user runs this script
% a dialogue box will open and ask the user to 'Please load the job
% retrieval MAT-file' which should be found in the same directory as this
% script. It has naming convention:
%
%   mjsJobID_<MYJOBID>_<MYJOBNAME>.mat
%
% Once this MAT-file is loaded, the job ID (MYJOBID) and the user specified
% job name (MYJOBNAME) are loaded into the current workspace and are used
% to retrieve information about the job from the MJS.
%
% # CONFIGURATION CONTROL:
%
% EG: C:\Users\<USERNAME>\Documents\MATLAB\<PROJECT>\<SUBDIRECTORY>
%
%        C:\Users\James Brown\Documents\MATLAB\mjs
%        C:\Users\James Brown\Documents\MATLAB\mjs\scripts
%        C:\Users\James Brown\Documents\MATLAB\mjs\latex
%
% # VERSION CONTROL: This script was updated by Donovan Platt to be
% consistent with migration from CSAMMJS to AMFcluster.
%_________________________________________________________________________%
 
 
 
%% STEP 0: ENSURE THAT THIS SCRIPT RUNS IN ITS DIRECTORY
% Get info
tmp = matlab.desktop.editor.getActive;
% Set cd
cd(fileparts(tmp.Filename));
% Clear
clear tmp;
%_________________________________________________________________________%
 
 
 
%% STEP 1: SET UP WORKSPACE
% The following commands prepare the client session of MATLAB by clearing
% all variables from the client session workspace, closes all
% open figures and clears the command window of any displayed output.
clear, close, clc;
%_________________________________________________________________________%
 
 
 
%% STEP 2: LOAD THE JOB ID
% This section opens up a dialogue box asking the user to load the MAT-file
% that contains the job name (MYJOBNAME) and the MJS job ID (MYJOBID).
% Please see above in the section entitled "DATA SPECIFICATION".
 
% Load the MAT-file name into the workspace. This MAT-file is the output of
% the submit script and has naming convention:
%   mjsJobID_<MYJOBID>_<MYJOBNAME>.mat
[mjsJobIDMATFileName,mjsJobIDMATPathName,~] = uigetfile('*.mat','Please load the job retrieval MAT-file','your_job_name');
% Load the MAT-file that contains the job name (MYJOBNAME) and the MJS job
% ID (MYJOBID)
[myJobData] = load(mjsJobIDMATFileName);
% Extract the MJS job ID and store in the variable MYJOBID
[myJobID] = myJobData.myJobID;
% Extract the user specified name of the job with naming convention
% [myJobName] = <USER_INITIALS>_<JOB_NAME>_<DDMMMYYYY_HHMM>
[myJobName] = myJobData.myJobName;
% Extract the name of the cluster profile
[clusterProfileName] = myJobData.clusterProfileName;
%_________________________________________________________________________%
 
 
 
%% STEP 3: RECONNECT TO THE CLUSTER
% Reinitialize the cluster object using the same profile as used in the
% job submission script.
[hpcBladeCluster] = parcluster(clusterProfileName);
% Print details of job object to Command Window
fprintf('+ ------------------------------------------------------------ +\n\n')
fprintf('  CLUSTER OBJECT PROPERTIES:\n\n')
disp(hpcBladeCluster)
fprintf('+ ------------------------------------------------------------ +\n\n')
%_________________________________________________________________________%
 
 
 
%% STEP 4: RETRIEVE THE JOB OBJECT CORRESPONDING TO YOUR JOB ID
% Get the job object of your job from the cluster
jobObject = findJob(hpcBladeCluster,'ID',myJobID);
% Print details of job object to Command Window
fprintf('  JOB OBJECT PROPERTIES:\n\n')
disp(jobObject)
fprintf('+ ------------------------------------------------------------ +\n')
%_________________________________________________________________________%
 
 
 
%% STEP 5: CHECK THE STATUS OF THE JOB
% Check the job status on the cluster
myJobStatus = jobObject.State;
% Display job status to Command Window
fprintf('\nThe status of the job with ID %d that was submitted to the \n',myJobID);
fprintf('''%s'' cluster on %s is: %s \n',hpcBladeCluster.Profile,jobObject.SubmitTime);
fprintf('\n\n  --> %s\n',upper(myJobStatus))
if strncmpi('finished',myJobStatus,3)
    fprintf('\nPlease SAVE a MAT-file of the job''s output in an appropriate\n');
    fprintf('location on the client machine using the dialogue box that has\n');
    fprintf('just popped up on the screen.\n');
else
    fprintf('\nThe requested job with job ID %d is currently still %s.\n',myJobID,myJobStatus);
    fprintf('Please return at a later stage and try again.\n');
    return;
end
fprintf('\n+ ------------------------------------------------------------ +\n');
%_________________________________________________________________________%
 
 
 
%% STEP 6: RETRIEVE OUTPUT OF JOB AND THEN DELETE IT FROM THE MJS
% If the job is finished then we can retrieve the workspace of the job from
% the cluster and load it into the workspace of the client machine, We then
% save it to an appropriate location on the client machine.
 
% Retrieve the output of the requested job and store in the [1x1]
% structure JOBOUTPUT.
[myJobOutput] = fetchOutputs(jobObject);
% Expand the structure.
[myJobOutput] = myJobOutput{:};
% Get diary
diary(jobObject);
% Save the output of the job, as stored in the structure JOBOUTPUT, in
% a user specified location as a MAT-file. A user dialogue box will open
% asking the user to choose a desired file name and location for saving of
% the job's output.
% Begin a while loop that will force the user to save the output of the
% job. This is to ensure that the any output that was fetched from the
% cluster is saved with probability 1. After the save is successful the job
% is DELETED from the MJS and the MAT-file containing the job ID is also
% deleted from its location in the project directory.
[jobOutputFileName] = 0;
while (jobOutputFileName == 0)
    [jobOutputFileName,jobOutputPathName] = uiputfile('*.mat','Please save your jobs output','ChooseAPrettyFileName');
end
save(fullfile(jobOutputPathName,jobOutputFileName),'myJobOutput','-v7.3');
% Delete the job from the cluster. This is a matter of good practice.
% Since ALL possible output from your job has just been saved by the
% user in a user chosen location with a user chosen name it is assumed
% that the job does not need to be accessed anymore and is therefore
% deleted from the cluster. This ensures that cluster storage resources
% are not wasted pointlessly by jobs that have already been retrieved.
% The onus falls on the user to ensure that they save the output of the
% job they have submitted.
delete(jobObject);
% Delete the MAT-file containing the job ID
delete(fullfile(mjsJobIDMATPathName,mjsJobIDMATFileName));
% Display
fprintf('\nThe requested job with job ID %d has been processed by the\n',myJobID);
fprintf('cluster and the output has been loaded into the client''s\n');
fprintf('workspace as the structure "jobOutput". You should have also\n');
fprintf('saved this structure as a MAT-file when you were prompted.\n\n');
fprintf('IMPORTANT! Please note that the requested job with job ID %d\n',myJobID);
fprintf('has now been DELETED from the cluster and is now irretrievable.\n');
fprintf('If you have not saved the structure "jobOutput" please do so\n');
fprintf('now as once this session?s workspace is cleared the job''s\n');
fprintf('output will be gone forever.\n');
fprintf('\n+ ------------------------------------------------------------ +\n');
%_________________________________________________________________________%
